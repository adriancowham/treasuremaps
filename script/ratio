#!/bin/sh
exec scala -cp .:out/src -deprecation "$0" "$@"
!#
/////////////////////////////////////////////////////////////////////////
// Script to calculate the ratio of regex matches to non-matches. This
// script takes one parameter, which is the region to to calculate the 
// ration for. If this parameter not provided ( i.e. no parameters are
// provided ), this script will target the "global" region.
/////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
// Imports
/////////////////////////////////////////////////////////////////////////
import scala.xml._
import scala.collection.immutable.List
import java.io.File
/////////////////////////////////////////////////////////////////////////
// Function Definitions
/////////////////////////////////////////////////////////////////////////

def countPosts( feed: List[String] ) : Int = {

	if( feed.size == 1 ) { return count( feed.head ) }
	else { 
		return count( feed.head ) + countPosts( feed.tail ) 
	}
}

def count( filename: String ) : Int = {
	// open the feed
	val rss = XML load( filename )
	// parse feed all the posts
	val posts = rss \ "description"

	println( "Filename: " + filename + " - Number of posts: " + posts.size )
	return posts size
}

def usage( msg: String ) = {
	println( msg )
	sys.exit
}

/////////////////////////////////////////////////////////////////////////
// Constants
/////////////////////////////////////////////////////////////////////////

// pull the region from the args and normalize on lower case
val region = if ( args.size == 0 ) "global" else args( 0 ).toLowerCase

// if the directory does not exist, print usage and exit
if( !new File( "data/analytics/" + region ).exists ) usage( "Directory %s doesn't exist".format( region ) )

println( "Processing the %s region".format( region ) )

val prefix = "data/analytics/%s/".format( region )
// list of posts where an address couldn't be identified
val unidentifiables = prefix + "unidentifiables.xml" :: Nil

// TODO: need to handle region directories that will have timestamp subdirectories

// list of posts where an address was identified with high confidence
val identifiables = 
				prefix + "avenues.xml" :: 
				prefix + "circles.xml" :: 
				prefix + "courts.xml"  :: 
				prefix + "drives.xml"  :: 
				prefix + "lanes.xml"   :: 
				prefix + "places.xml"  ::
				prefix + "roads.xml"   :: 
				prefix + "streets.xml" :: 
				prefix + "ways.xml"    :: Nil


/////////////////////////////////////////////////////////////////////////
// Start Script
/////////////////////////////////////////////////////////////////////////
val known :Double = countPosts( identifiables )
val unknown :Double = countPosts( unidentifiables )

println( "--------------------------------------------------")
println( "Total Unknown: " + unknown )
println( "Total Known: " + known )
println( "Percentage Known: %.2f".format( unknown/known * 100 ) )
/////////////////////////////////////////////////////////////////////////
// End Script
/////////////////////////////////////////////////////////////////////////