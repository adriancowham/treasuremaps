#!/bin/sh
exec scala -cp .:out/src -deprecation "$0" "$@"
!#
/////////////////////////////////////////////////////////////////////////
// Script to calculate the ratio of regex matches to non-matches
/////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
// Imports
/////////////////////////////////////////////////////////////////////////
import scala.xml._
import scala.collection.immutable.List

/////////////////////////////////////////////////////////////////////////
// Function Definitions
/////////////////////////////////////////////////////////////////////////

def countPosts( feed: List[String] ) : Int = {

	if( feed.size == 1 ) { return count( feed.head ) }
	else { 
		return count( feed.head ) + countPosts( feed.tail ) 
	}
}

def count( filename: String ) : Int = {
	// open the feed
	val rss = XML load( filename )
	// parse feed all the posts
	val posts = rss \ "description"

	println( "Filename: " + filename + " - Number of posts: " + posts.size )
	return posts size
}

/////////////////////////////////////////////////////////////////////////
// Constants
/////////////////////////////////////////////////////////////////////////

// list of posts where an address couldn't be identified
val unidentifiables = "data/analytics/global/unidentifiables.xml" :: Nil

// list of posts where an address was identified with high confidence
val identifiables = "data/analytics/global/avenues.xml" :: 
				"data/analytics/global/circles.xml" :: 
				"data/analytics/global/courts.xml" :: 
				"data/analytics/global/drives.xml" :: 
				"data/analytics/global/lanes.xml" :: 
				"data/analytics/global/places.xml" ::
				"data/analytics/global/roads.xml" :: 
				"data/analytics/global/streets.xml" :: 
				"data/analytics/global/ways.xml" :: Nil


/////////////////////////////////////////////////////////////////////////
// Start Script
/////////////////////////////////////////////////////////////////////////
val known :Double = countPosts( identifiables )
val unknown :Double = countPosts( unidentifiables )

println( "--------------------------------------------------")
println( "Total Unknown: " + unknown )
println( "Total Known: " + known )
println( "Percentage Known: %.2f".format( unknown/known * 100 ) )
/////////////////////////////////////////////////////////////////////////
// End Script
/////////////////////////////////////////////////////////////////////////