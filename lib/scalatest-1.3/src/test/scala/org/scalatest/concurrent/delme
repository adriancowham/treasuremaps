package org.scalatest.concurrent

import org.scalatest.matchers.ShouldMatchers
import org.scalatest.FunSuite
import org.scalatest.Suite
import org.scalatest.SharedHelpers
import org.scalatest.events.TestSucceeded
import org.scalatest.Stopper
import org.scalatest.Tracker
import org.scalatest.Filter

class ThreeStrikesYourOutSuite extends FunSuite with ShouldMatchers with SharedHelpers {

  class BaseballSuite(private var successList: List[Boolean]) extends Suite {
    var invocationCount = 0
    def testMe() {
      invocationCount += 1
      val shouldSucceed = successList.head
      successList = successList.tail
      if (!shouldSucceed) fail()
    }
  }

  def ensureTestSucceeds(suite: Suite) {
    val reporter = new EventRecordingReporter
    suite.run(None, reporter, new Stopper {}, Filter(), Map(), None, new Tracker)

    val events = reporter.eventsReceived

    val testSucceededOption = events.find(_.isInstanceOf[TestSucceeded])
    assert(testSucceededOption.isDefined)
    assert(testSucceededOption.get.asInstanceOf[TestSucceeded].testName === "testMe")
  }

  test("three passes generate TestSucceeded") {
    ensureTestSucceeds(new BaseballSuite(List(true, true, true)))
  }

  test("passing a maxTries less than 3 generates an IllegalArgumentException") {
    intercept[IllegalArgumentException] {
      Conductor.tryTryAgain(3)
      new Suite with MultipleTries {
        override val maxTries = 2
      }.
    }
    intercept[IllegalArgumentException] {
      new Suite with MultipleTries {
        override val maxTries = 1
      }
    }
    intercept[IllegalArgumentException] {
      new Suite with MultipleTries {
        override val maxTries = 0
      }
    }
    intercept[IllegalArgumentException] {
      new Suite with MultipleTries {
        override val maxTries = -1
      }
    }
    intercept[IllegalArgumentException] {
      new Suite with MultipleTries {
        override val maxTries = -2
      }
    }
    intercept[IllegalArgumentException] {
      new Suite with MultipleTries {
        override val maxTries = -100
      }
    }
  }

  ignore("one failure and three passes generate TestSucceeded") {
    ensureTestSucceeds(new BaseballSuite(List(false, true, true, true)))
  }
}
// 925 372 0436 alex
