
x should be an instanceOf [Y]

x should not be an (instanceOf [Y])

{ x > 7 } should be trueElse x + " was not greater than 7"

{ x > 7 } should be falseElse x + " was greater than 7"

(s.charAt(-1)).thrown should be an instanceOf [IndexOutOfBoundsException]

(s.charAt(-1)).thrown should be (an instanceOf [IndexOutOfBoundsException] and have ('message("String index out of range: -1")))

(s.charAt(-1)).thrown should be (
  an instanceOf [IndexOutOfBoundsException] and
  have ('message("String index out of range: -1"))
)

val thrown = (s.charAt(-1)).thrown
thrown should be anInstance of [IndexOutOfBoundsException]
thrown should have ('message("String index out of range: -1"))

// thrown should have ('message("String index out of range: -1")))
// thrown.message should be (Some("String index out of range: -1"))

(s.charAt(-1)).thrown should be (anInstanceOf [IndexOutOfBoundsException])

(s.charAt(-1)).thrown should be anInstance of [IndexOutOfBoundsException]

(s.charAt(-1)).thrown should not be anInstance (of [IndexOutOfBoundsException])

(s.charAt(-1)).thrown should not be an (instanceOf [IndexOutOfBoundsException])

(s.charAt(-1)).thrown should be (anInstanceOf [IndexOutOfBoundsException])
(s.charAt(-1)).thrown should not be anInstanceOf [IndexOutOfBoundsException]

checkThat((set: Set[Int], i: Int) => i != set.size ==> set should not { have size (i) })

try to overload check. once with Boolean and once with Any The boolean one should work fine I'd hope.

(s.charAt(-1)).thrown should be anInstance of [IndexOutOfBoundsException]

(s.charAt(-1)).thrown should be an instanceOf [IndexOutOfBoundsException]

(s.charAt(-1)).thrown should (be anInstance of [IndexOutOfBoundsException] and have ('message("String index out of range: -1")))

x should not be anInstance (of [IAE])

